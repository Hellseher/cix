#+conf_url: https://www.freedesktop.org/software/systemd/man/journald.conf.html
#+conf_man: journald.conf.5
#+conf_cmd: /usr/bin/journalctl
#+conf_path: /etc/systemd/journald.conf 
#+conf_frmt: option=value (*.ini)
#+conf_re: 
#+conf_total: 29

[Journal]

# Controls where to store journal data. One of "volatile", "persistent", "auto"
# and "none". If "volatile", journal log data will be stored only in memory, i.e.
# below the /run/log/journal hierarchy (which is created if needed). If
# "persistent", data will be stored preferably on disk, i.e. below the
# /var/log/journal hierarchy (which is created if needed), with a fallback to
# /run/log/journal (which is created if needed), during early boot and if the disk
# is not writable. "auto" is similar to "persistent" but the directory
# /var/log/journal is not created if needed, so that its existence controls where
# log data goes. "none" turns off all storage, all log data received will be
# dropped. Forwarding to other targets, such as the console, the kernel log
# buffer, or a syslog socket will still work however.
#+default: auto, +values: [volatile, persistent, auto, none]
Storage=auto

# Takes a boolean value. If enabled (the default), data objects that shall be
# stored in the journal and are larger than a certain threshold are compressed
# before they are written to the file system.
#+default: yes, +values: [yes, no]
Compress=yes

# Takes a boolean value. If enabled (the default), and a sealing key is available
# (as created by journalctl(1)'s --setup-keys command), Forward Secure Sealing
# (FSS) for all persistent journal files is enabled. FSS is based on Seekable
# Sequential Key Generators by G. A. Marson and B. Poettering
# (doi:10.1007/978-3-642-40203-6_7) and may be used to protect journal files from
# unnoticed alteration.
#+default: yes, +values: [yes, no]
Seal=yes

# Controls whether to split up journal files per user, either "uid" or "none".
# Split journal files are primarily useful for access control: on UNIX/Linux
# access control is managed per file, and the journal daemon will assign users
# read access to their journal files. If "uid", all regular users will each get
# their own journal files, and system users will log to the system journal. If
# "none", journal files are not split up by user and all messages are instead
# stored in the single system journal. In this mode unprivileged users generally
# do not have access to their own log data. Note that splitting up journal files
# by user is only available for journals stored persistently. If journals are
# stored on volatile storage (see Storage= above), only a single journal file is
# used. 
#+default: uid +values: [uid, none]
SplitMode=uid

# Configures the rate limiting that is applied to all messages generated on the
# system. If, in the time interval defined by RateLimitIntervalSec=, more messages
# than specified in RateLimitBurst= are logged by a service, all further messages
# within the interval are dropped until the interval is over. A message about the
# number of dropped messages is generated. This rate limiting is applied
# per-service, so that two services which log do not interfere with each other's
# limits. Defaults to 1000 messages in 30s. The time specification for
# RateLimitIntervalSec= may be specified in the following units: "s", "min", "h",
# "ms", "us". To turn off any kind of rate limiting, set either value to 0.
#+default: 30s
RateLimitIntervalSec=30s
#+default: 1000
RateLimitBurst=1000

# Enforce size limits on the journal files stored. The options prefixed with
# "System" apply to the journal files when stored on a persistent file system,
# more specifically /var/log/journal.

# Controls how much disk space the journal may use up at most.
#+default: 10%, +values: 1..100% 
SystemMaxUse=10%
# Controls how much disk space systemd-journald shall leave free for other uses.
#+default: 15%, +values: 1..100% 
SystemKeepFree=15%
# Controls how large individual journal files may grow at most.
#+default: 1/8 of SystemMaxUse, +values: [K, M, G, T, P, E]
SystemMaxFileSize=
# Controls how many individual journal files to keep at most.
#+default: 100
SystemMaxFiles=100

# The options prefixed with "Runtime" apply to
# the journal files when stored on a volatile in-memory file system, more
# specifically /run/log/journal.

# Controls how much disk space the journal may use up at most.
#+default: 10%, +values: 1..100% 
RuntimeMaxUse=10%
# Controls how much disk space systemd-journald shall leave free for other uses.
#+default: 15%, +values: 1..100% 
RuntimeKeepFree=15%
# Controls how large individual journal files may grow at most.
#+default: 1/8 of RuntimeMaxUse, +values: [K, M, G, T, P, E]
RuntimeMaxFileSize=
# Controls how many individual journal files to keep at most.
#+default: 100
RuntimeMaxFiles=100

# The maximum time to store entries in a single journal file before rotating to
# the next one. Normally, time-based rotation should not be required as size-based
# rotation with options such as SystemMaxFileSize= should be sufficient to ensure
# that journal files do not grow without bounds. However, to ensure that not too
# much data is lost at once when old journal files are deleted, it might make
# sense to change this value from the default of one month. Set to 0 to turn off
# this feature. This setting takes time values which may be suffixed with the
# units "year", "month", "week", "day", "h" or "m" to override the default time
# unit of seconds. 
#+default: 1month
MaxFileSec=

# The maximum time to store journal entries. This controls whether journal files
# containing entries older then the specified time span are deleted. Normally,
# time-based deletion of old journal files should not be required as size-based
# deletion with options such as SystemMaxUse= should be sufficient to ensure that
# journal files do not grow without bounds. However, to enforce data retention
# policies, it might make sense to change this value from the default of 0 (which
# turns off this feature). This setting also takes time values which may be
# suffixed with the units "year", "month", "week", "day", "h" or " m" to override
# the default time unit of seconds.
MaxRetentionSec=

# The timeout before synchronizing journal files to disk. After syncing, journal
# files are placed in the OFFLINE state. Note that syncing is unconditionally done
# immediately after a log message of priority CRIT, ALERT or EMERG has been
# logged. This setting hence applies only to messages of the levels ERR, WARNING,
# NOTICE, INFO, DEBUG. The default timeout is 5 minutes.
SyncIntervalSec=

# Control whether log messages received by the journal daemon shall be forwarded
# to a traditional syslog daemon, to the kernel log buffer (kmsg), to the system
# console, or sent as wall messages to all logged-in users. These options take
# boolean arguments. If forwarding to syslog is enabled but nothing reads messages
# from the socket, forwarding to syslog has no effect. By default, only forwarding
# to wall is enabled. These settings may be overridden at boot time with the
# kernel command line options "systemd.journald.forward_to_syslog",
# "systemd.journald.forward_to_kmsg", "systemd.journald.forward_to_console", and
# "systemd.journald.forward_to_wall". If the option name is specified without "="
# and the following argument, true is assumed. Otherwise, the argument is parsed
# as a boolean. When forwarding to the console, the TTY to log to can be changed
# with TTYPath=, described below.
ForwardToSyslog=
ForwardToKMsg=
ForwardToConsole=
ForwardToWall=

# Controls the maximum log level of messages that are stored on disk, forwarded to
# syslog, kmsg, the console or wall (if that is enabled, see above). As argument,
# takes one of "emerg", "alert", "crit", "err", "warning", "notice", "info",
# "debug", or integer values in the range of 0â€“7 (corresponding to the same
# levels). Messages equal or below the log level specified are stored/forwarded,
# messages above are dropped. Defaults to "debug" for MaxLevelStore= and
# MaxLevelSyslog=, to ensure that the all messages are written to disk and
# forwarded to syslog. Defaults to "notice" for MaxLevelKMsg=, "info" for
# MaxLevelConsole=, and "emerg" for MaxLevelWall=. These settings may be
# overridden at boot time with the kernel command line options
# "systemd.journald.max_level_store=", "systemd.journald.max_level_syslog=",
# "systemd.journald.max_level_kmsg=", "systemd.journald.max_level_console=",
# "systemd.journald.max_level_wall=".
MaxLevelStore=
MaxLevelSyslog=
MaxLevelKMsg=
MaxLevelConsole=
MaxLevelWall=

# Journal reads /dev/kmsg messages generated by the kernel.
#+default: yes, +vaules: [yes,no]
ReadKMsg=yes

# Change the console TTY to use if ForwardToConsole=yes is used.
#+default: /dev/console.
TTYPath=/dev/console

# The maximum line length to permit when converting stream logs into record logs.
#+default: 79, +values: int 79..num
LineMax=79

# End of cix-journald.conf