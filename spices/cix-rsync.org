# File          : cix-rsync.org
# Created       : <2016-11-25 Fri 20:32:45 GMT>
# Modified      : <2017-8-22 Tue 23:42:40 BST> sharlatan
# Author        : sharlatan
# Maintainer(s) :
# Sinopsis      : A program for synchronizing files over a network

#+OPTIONS: num:nil

[[file:../cix-main.org][|â‰£|]]
#+TITLE: rsync
|-----------------+------------------|
| *Author*        | Andrew Tridgell, |
|                 | Paul Mackerras   |
| *Maintainer(s)* |                  |
| *Released*      | 1996             |
| *Source*        | [[https://git.samba.org/rsync.git/][rsync.git]]        |
| *Man*           | [[http://man7.org/linux/man-pages/man1/rsync.1.html][rsync.1]]          |
| *Info*          |                  |
|-----------------+------------------|

=rsync= uses a reliable algorithm to bring remote and host files into sync very
quickly. =rsync= is fast because it just sends the differences in the files over
the network instead of sending the complete files. =rsync= is often used as a
very powerful mirroring process or just as a more capable replacement for the
=rcp= command. A technical report which describes the =rsync= algorithm is
included in this package.
-----
* Receipts
** rsync                                                                       :cmd:
*** rsync::examples
**** rsync-161128234019
Resume rsync after broken connection:
#+BEGIN_SRC sh
  #!/usr/bin/env bash

  FILE_TO_SEND="send_me.there"
  HOST_NAME="waiting.for.me"
  USER_NAME="are_you"

  while true; do
      rsync -avz --append "$FILE_TO_SEND" "$USER_NAME"@"$HOST_NAME"
      [[ "$?" = "0" ]] && break
      echo "File is not tranfared, resume."
  done
#+END_SRC
[[file:./cix-gnu-core-utilities.org::*echo][echo]]
[[file:./cix-gnu-bash-builtin.org::*while][while]]

**** rsync-161210234525
multi-threaded *rsync* on a splitted file you can use *tar* to create a consolidated
file and split it after that and use key authentication:
#+BEGIN_SRC sh
  #!/usr/bin/env bash

  THREADS="$(grep -c processor /proc/cpuinfo)"
  CHUNK="10M"
  SUFF="splitted_file_"
  FNAME="test_file"

  SRC_PATH="$HOME"
  SRC_SHA256="$(sha256sum ${SRC_PATH}/test_file)"
  # Having key authentication can ease the rsync process
  DST="misa"
  DST_PATH="${DST}:~/"

  echo "$SRC_SHA256"
  split --bytes="$CHUNK" "${SRC_PATH}/${FNAME}" "${SRC_PATH}/${SUFF}"

  find "$SRC_PATH" -maxdepth 1 -name "${SUFF}*" -print0 \
      | xargs -0 -n1 -P"$THREADS" -I% \
              rsync --archive --compress "%" "$DST_PATH"

  # Consolidate chunks and hash-check destination integrity
  ssh "$DST" "cat ${SUFF}* > ${FNAME} && sha256sum test_file && rm ${SUFF}*"
#+END_SRC
[[file:./cix-gnu-core-utilities.org::*sha256sum][sha256sum (1)]]
[[file:./cix-gnu-core-utilities.org::*split][split (1)]]
[[file:./cix-gnu-findutils.org::*find][find (1)]]
[[file:./cix-gnu-findutils.org::*xargs][xargs (1)]]

* References
** Links
- Speaking UNIX: Advanced applications of rsync
  https://www.ibm.com/developerworks/aix/library/au-spunix_rsync/

# End of cix-rsync.org
